// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/controller/WutongVolume/plugin/plugin.go

// Package mock is a generated GoMock package.
package mock

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
	"sigs.k8s.io/controller-runtime/pkg/client"
)

// MockCSIPlugin is a mock of CSIPlugin interface
type MockCSIPlugin struct {
	ctrl     *gomock.Controller
	recorder *MockCSIPluginMockRecorder
}

// MockCSIPluginMockRecorder is the mock recorder for MockCSIPlugin
type MockCSIPluginMockRecorder struct {
	mock *MockCSIPlugin
}

// NewMockCSIPlugin creates a new mock instance
func NewMockCSIPlugin(ctrl *gomock.Controller) *MockCSIPlugin {
	mock := &MockCSIPlugin{ctrl: ctrl}
	mock.recorder = &MockCSIPluginMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCSIPlugin) EXPECT() *MockCSIPluginMockRecorder {
	return m.recorder
}

// IsPluginReady mocks base method
func (m *MockCSIPlugin) IsPluginReady() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsPluginReady")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsPluginReady indicates an expected call of IsPluginReady
func (mr *MockCSIPluginMockRecorder) IsPluginReady() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsPluginReady", reflect.TypeOf((*MockCSIPlugin)(nil).IsPluginReady))
}

// GetProvisioner mocks base method
func (m *MockCSIPlugin) GetProvisioner() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProvisioner")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetProvisioner indicates an expected call of GetProvisioner
func (mr *MockCSIPluginMockRecorder) GetProvisioner() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProvisioner", reflect.TypeOf((*MockCSIPlugin)(nil).GetProvisioner))
}

// GetClusterScopedResources mocks base method
func (m *MockCSIPlugin) GetClusterScopedResources() []client.Object {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClusterScopedResources")
	ret0, _ := ret[0].([]client.Object)
	return ret0
}

// GetClusterScopedResources indicates an expected call of GetClusterScopedResources
func (mr *MockCSIPluginMockRecorder) GetClusterScopedResources() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClusterScopedResources", reflect.TypeOf((*MockCSIPlugin)(nil).GetClusterScopedResources))
}

// GetSubResources mocks base method
func (m *MockCSIPlugin) GetSubResources() []client.Object {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubResources")
	ret0, _ := ret[0].([]client.Object)
	return ret0
}

// GetSubResources indicates an expected call of GetSubResources
func (mr *MockCSIPluginMockRecorder) GetSubResources() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubResources", reflect.TypeOf((*MockCSIPlugin)(nil).GetSubResources))
}
